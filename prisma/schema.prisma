// prisma/schema.prisma - Complete Fixed Schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  passwordHash  String    @map("password_hash")
  avatarUrl     String?   @map("avatar_url")
  xpTotal       Int       @default(0) @map("xp_total")
  level         Int       @default(1)
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  progress      UserProgress[]
  achievements  UserAchievement[]
  role          UserRole    @default(STUDENT)
  gradeLevel    GradeLevel?
  schoolId      String?
  school        School?     @relation(fields: [schoolId], references: [id])
  
  aiProjects    AIProject[]
  aiProgress    AIProgress[]
  resources     TeacherResource[]
  
  @@index([email])
  @@index([xpTotal])
  @@index([level])
  @@index([createdAt])
  @@map("users")
}


model Lesson {
  id          String    @id @default(cuid())
  title       String
  description String?
  content     Json
  module      String
  orderIndex  Int       @map("order_index")
  xpReward    Int       @default(100) @map("xp_reward")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  progress    UserProgress[]

  @@index([module])
  @@index([module, orderIndex])
  @@index([orderIndex])
  @@index([createdAt])
  @@unique([module, orderIndex])
  @@map("lessons")
}

model UserProgress {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  lessonId         String    @map("lesson_id")
  status           String    @default("not_started")
  score            Int       @default(0)
  attempts         Int       @default(0)
  codeSubmissions  Json?     @map("code_submissions")
  completedAt      DateTime? @map("completed_at")
  createdAt        DateTime  @default(now()) @map("created_at")
  
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson           Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@index([status])
  @@index([userId, status])
  @@index([completedAt])
  @@index([createdAt])
  @@map("user_progress")
}

model Achievement {
  id          String    @id @default(cuid())
  name        String
  description String?
  icon        String?
  xpReward    Int       @default(50) @map("xp_reward")
  criteria    Json
  createdAt   DateTime  @default(now()) @map("created_at")
  
  userAchievements UserAchievement[]
  
  @@index([name])
  @@index([createdAt])
  @@map("achievements")
}

model UserAchievement {
  id            String    @id @default(cuid())
  userId        String    @map("user_id")
  achievementId String    @map("achievement_id")
  earnedAt      DateTime  @default(now()) @map("earned_at")
  
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement  @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
  @@index([earnedAt])
  @@map("user_achievements")
}


// AI Education Models
model AIModule {
  id          String      @id @default(cuid())
  name        String      @unique
  slug        String      @unique
  description String
  gradeLevel  GradeLevel
  orderIndex  Int
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")
  
  lessons     AILesson[]
  
  @@index([gradeLevel, orderIndex])
  @@map("ai_modules")
}

model AILesson {
  id            String      @id @default(cuid())
  title         String
  description   String      @db.Text
  moduleId      String      @map("module_id")
  module        AIModule    @relation(fields: [moduleId], references: [id])
  gradeLevel    GradeLevel  @map("grade_level")
  difficulty    Difficulty  @default(BEGINNER)
  orderIndex    Int         @map("order_index")
  xpReward      Int         @default(100) @map("xp_reward")
  estimatedTime Int         @map("estimated_time") // in minutes
  
  // Content structure
  content       Json        // Stores theory, objectives, instructions
  resources     Json?       // External resources, videos, links
  
  // Flags
  isPublished   Boolean     @default(false) @map("is_published")
  requiresTeacher Boolean   @default(false) @map("requires_teacher")
  
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  
  progress      AIProgress[]
  projects      AIProject[]
  
  @@index([moduleId, orderIndex])
  @@index([gradeLevel, difficulty])
  @@map("ai_lessons")
}

model AIProject {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  user          User        @relation(fields: [userId], references: [id])
  lessonId      String      @map("lesson_id")
  lesson        AILesson    @relation(fields: [lessonId], references: [id])
  
  title         String
  description   String?     @db.Text
  projectType   ProjectType @map("project_type")
  projectData   Json        @map("project_data") // Stores code, model data, configurations
  
  status        ProjectStatus @default(DRAFT)
  score         Int?
  feedback      String?     @db.Text
  
  isPublic      Boolean     @default(false) @map("is_public")
  views         Int         @default(0)
  likes         Int         @default(0)
  
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  submittedAt   DateTime?   @map("submitted_at")
  
  @@index([userId, status])
  @@index([lessonId, status])
  @@map("ai_projects")
}

model AIProgress {
  id            String      @id @default(cuid())
  userId        String      @map("user_id")
  user          User        @relation(fields: [userId], references: [id])
  lessonId      String      @map("lesson_id")
  lesson        AILesson    @relation(fields: [lessonId], references: [id])
  
  status        LessonStatus @default(NOT_STARTED)
  score         Int         @default(0)
  timeSpent     Int         @default(0) @map("time_spent") // in seconds
  attempts      Int         @default(0)
  
  completedAt   DateTime?   @map("completed_at")
  lastAccessAt  DateTime    @default(now()) @map("last_access_at")
  
  @@unique([userId, lessonId])
  @@index([userId, status])
  @@map("ai_progress")
}

model AIEthicsModule {
  id            String      @id @default(cuid())
  title         String
  description   String      @db.Text
  gradeLevel    GradeLevel  @map("grade_level")
  topic         EthicsTopic
  
  content       Json        // Scenarios, case studies, activities
  activities    Json        // Interactive elements
  resources     Json?       // Additional materials
  
  orderIndex    Int         @map("order_index")
  isActive      Boolean     @default(true) @map("is_active")
  
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  
  @@index([gradeLevel, topic])
  @@map("ai_ethics_modules")
}

model TeacherResource {
  id            String      @id @default(cuid())
  title         String
  description   String      @db.Text
  resourceType  ResourceType @map("resource_type")
  gradeLevel    GradeLevel? @map("grade_level")
  
  content       String      @db.Text
  fileUrl       String?     @map("file_url")
  
  authorId      String      @map("author_id")
  author        User        @relation(fields: [authorId], references: [id])
  
  tags          String[]
  downloads     Int         @default(0)
  
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  
  @@index([resourceType, gradeLevel])
  @@index([authorId])
  @@map("teacher_resources")
}

model SchoolDistrict {
  id            String      @id @default(cuid())
  name          String
  code          String      @unique
  adminEmail    String      @map("admin_email")
  
  settings      Json        // District-wide settings
  
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  
  schools       School[]
  
  @@map("school_districts")
}

model School {
  id            String      @id @default(cuid())
  name          String
  code          String      @unique
  districtId    String?     @map("district_id")
  district      SchoolDistrict? @relation(fields: [districtId], references: [id])
  
  adminEmail    String      @map("admin_email")
  settings      Json        // School-specific settings
  
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  
  users         User[]
  
  @@map("schools")
}

// Enums (if not already in your schema)
enum UserRole {
  STUDENT
  TEACHER
  ADMIN
  SUPER_ADMIN
}

enum GradeLevel {
  K2          // Kindergarten to 2nd grade
  G35         // Grades 3-5
  G68         // Grades 6-8
  G912        // Grades 9-12
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum ProjectType {
  TEACHABLE_MACHINE
  CHATBOT
  NEURAL_NETWORK
  GAME_AI
  DATA_VISUALIZATION
  ML_MODEL
  CREATIVE_AI
}

enum ProjectStatus {
  DRAFT
  SUBMITTED
  REVIEWED
  PUBLISHED
}

enum LessonStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum EthicsTopic {
  BIAS_FAIRNESS
  PRIVACY_SECURITY
  ACCOUNTABILITY
  FUTURE_OF_WORK
  MISINFORMATION
  RESPONSIBLE_USE
}

enum ResourceType {
  LESSON_PLAN
  WORKSHEET
  PRESENTATION
  VIDEO
  ASSESSMENT
  ACTIVITY
}